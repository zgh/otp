[This file, edoc/CHANGES, is not part of the Erlang/OTP distribution;
it is a temporary file describing the status of the on-going work
aiming at harmonizing Dialyzer specs and types with EDoc.]

EDoc can now extract Dialyzer types and specs for inclusion in the
output generated by EDoc.

Make sure to use the latest version of the files stdlib/src/erl_pp.erl
and stdlib/src/epp.erl as EDoc depends upon modifications made after
the release of R13B04.

A typical invocation that activates the new features:

  edoc:files([File], [{dialyzer_specs,all},{report_missing_type,true},
                      {report_type_mismatch,true},{pretty_print,erl_pp}]).

Feedback is welcome. Email Hans.Bolinder@ericsson.com, or
erlang-questions@erlang.org if the comment may be of interest to a
broader audience.

Change log
----------

2010-03-31 First version on the 'pu' branch.

EDoc changes
------------

By default EDoc ignores Dialyzer types and specs. The new option
'dialyzer_specs' takes these values:
 - 'none'; the default;
 - 'all'; Dialyzer specs and types are used when possible;
 - [{name(),arity()}; the selected Dialyzer specs are used.

There are two more options: 'report_missing_type' and
'report_type_mismatch', both boolean(). They are ignored unless
'dialyzer_specs' has some value other than 'none'. Note that unless
the option {preprocess,true} is given types may be missing since
header files are not parsed.

EDoc specifications can be overloaded. Clauses are separated by ";",
as in Dialyzer.

It is also possible to use 'when' guards in EDoc, in the same way as
Dialyzer does. However, there is a special case when a guard is
transformed into a local definition: "is_subtype(X, t())" yields "X =
t()". (It is possible that syntactic sugar will be added to the Erlang
parser so that guards can be expressed as "local" definitions.)

One now can (and should) use the word 'fun' when declaring funs in
EDoc. Not so long ago Dialyzer specs were modified in the same way,
and now EDoc has followed suite. This is an incompatible change since
the abstract type 'fun' of one argument can no longer be declared.

EDoc now prefers [] before nil() and [T] before list(T).

Most pre-defined types used by Dialyzer have been added to EDoc.

The binary types using '<<' and '>>' are now allowed in EDoc.

There is now a range type in EDoc, like Dialyzer's Integer '..' Integer.

There is a new option governing the output of types and specs:
'pretty_print'. Given the value 'erl_pp' the (fast) pretty printer in
STDLIB will be used. The default is to output each type definition and
each clause on one single line.

When using Dialyzer types and specs, types are extracted from record
definitions. Depending on how the record types are used they may or
may not show up as type definitions: if a record type only occurs in
definitions of opaque types, it is not shown. It is not known if this
way of handling record types is how it should be done. Note: the
handling of record types described here is the only exception to the
rule that all augmentations of the EDoc type syntax that were
necessary in order to cope with Dialyzer types can also be used
directly by @spec and @type.

Known issues
------------

Dialyzer takes the arity in account when naming specifications, but
EDoc has hitherto not done that. Kostis has so far been unwilling to
change the way Dialyzer works. EDoc has been modified as to mimic
Dialyzer's behaviour. In particular, when declaring the pre-defined
functions of EDoc the arity is now taken into account.

It is possible to have types with the same name but with different
number of arguments. However, all links to the types will point to the
same type declaration.

Dialyzer allows annotations "everywhere", but EDoc does not. Therefore
some Dialyzer annotations are ignored when Dialyzer specs and types
are used in EDoc.

The module M of a specification "-spec M:f(..." is ignored. EDoc
currently has no representation for external specs.

One cannot terminate an EDoc specification with a dot. It is unknown
if modifying the parser to make this possible would introduce any
bugs.

The Dialyzer type tagged 'paren_type' is ignored. It is unknown if
this is a bug.

EDoc has floating point constants, Dialyzer has not.

Some pre-defined types in Dialyzer are not (yet) recognized by EDoc.
